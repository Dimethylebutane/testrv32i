library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

use work.types.all;

entity Ex is
    port (
        --ctrl
        clk : in std_logic;
        w_i : in std_logic;
        w_o : out std_logic;

        --Bus
        Imm_i   : in ImmPipe;
        Op_i    : in OpPipe;
        Reg_i   : in RegisterAddrPipe;
        
        Imm_o   : out ImmPipe           := (others => '0');
        Op_o    : out OpPipe            := (others => '0');
        Reg_o   : out RegisterAddrPipe  := (others => '0');

        --TODO: STORE

        -- reg
        addr_0 : in RegisterAddr;
        addr_1 : in RegisterAddr;

        rs0 : in BUS_Type;
        rs1 : in BUS_Type
    );
end Ex;

architecture behaviour of Reg is
    signal w_internal : std_logic := "0";
begin
    --if stage is waiting then make upper stage to wait
    w_o <= "1" when w_internal = "1" else w_i;

    --route register addr
    rs0 <= Reg_i(1);
    rs2 <= Reg_i(2);

    process(clk)
    begin
        if rising_edge(clk) and w_i /= "1" then
            --TODO: Do work
        end if;
        if falling_edge(clk) and w_o /= "1" then --pass work
            Imm_o <= Imm_i;
            Op_o <= Op_i;
            Reg_o <= Reg_i;
        end if;
      end process;

end behaviour;